# Copyright (C) 2024 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

header: <WebCore/Font.h>
[Nested] enum class WebCore::FontOrigin : bool;
[Nested] enum class WebCore::FontIsInterstitial : bool;
[Nested] enum class WebCore::FontVisibility : bool;
[Nested] enum class WebCore::FontIsOrientationFallback : bool;

header: <WebCore/Font.h>
[CustomHeader] struct WebCore::FontInternalAttributes {
    std::optional<WebCore::RenderingResourceIdentifier> renderingResourceIdentifier;
    [BitField] WebCore::FontOrigin origin;
    [BitField] WebCore::FontIsInterstitial isInterstitial;
    [BitField] WebCore::FontVisibility visibility;
    [BitField] WebCore::FontIsOrientationFallback isTextOrientationFallback;
};

enum class WebCore::FontOrientation : bool

enum class WebCore::FontWidthVariant : uint8_t {
    RegularWidth,
    HalfWidth,
    ThirdWidth,
    QuarterWidth,
};

enum class WebCore::TextRenderingMode : uint8_t {
    AutoTextRendering,
    OptimizeSpeed,
    OptimizeLegibility,
    GeometricPrecision
};

using WebCore::FontPlatformData::IPCData = Variant<WebCore::FontPlatformSerializedData, WebCore::FontPlatformSerializedCreationData>;

[CreateUsing=fromIPCData] class WebCore::FontPlatformData {
    float size();
    WebCore::FontOrientation orientation();
    WebCore::FontWidthVariant widthVariant();
    WebCore::TextRenderingMode textRenderingMode();
    bool syntheticBold();
    bool syntheticOblique();
    WebCore::FontPlatformData::IPCData toIPCData();
}

header: <WebCore/FontPlatformData.h>
[CustomHeader] struct WebCore::FontPlatformDataAttributes {
    float m_size;
    WebCore::FontOrientation m_orientation;
    WebCore::FontWidthVariant m_widthVariant;
    WebCore::TextRenderingMode m_textRenderingMode;
    bool m_syntheticBold;
    bool m_syntheticOblique;
#if PLATFORM(WIN) && USE(CAIRO)
    LOGFONT m_font;
#endif
#if USE(CORE_TEXT)
    RetainPtr<CFDictionaryRef> m_attributes;
    CTFontDescriptorOptions m_options;
    RetainPtr<CFStringRef> m_url;
    RetainPtr<CFStringRef> m_psName;
#endif
#if USE(SKIA)
    SkString m_familyName;
    SkFontStyle m_style;
    Vector<hb_feature_t> m_features;
#endif
};

header: <WebCore/FontCustomPlatformData.h>
[CustomHeader] struct WebCore::FontCustomPlatformSerializedData {
    Ref<WebCore::SharedBuffer> fontFaceData;
    String itemInCollection;
    WebCore::RenderingResourceIdentifier renderingResourceIdentifier;
};

#if USE(CORE_TEXT)

header: <WebCore/FontPlatformData.h>

[CustomHeader] struct WebCore::FontPlatformSerializedTraits {
    String uiFontDesign;
    std::optional<RetainPtr<CFNumberRef>> weight;
    std::optional<RetainPtr<CFNumberRef>> width;
    std::optional<RetainPtr<CFNumberRef>> symbolic;
    std::optional<RetainPtr<CFNumberRef>> grade;
};

[CustomHeader] struct WebCore::FontPlatformOpticalSize {
    Variant<RetainPtr<CFNumberRef>, String> opticalSize;
};

[CustomHeader] struct WebCore::FontPlatformSerializedAttributes {
    String fontName;
    String descriptorLanguage;
    String descriptorTextStyle;

    std::optional<RetainPtr<CFDataRef>> matrix;

    std::optional<RetainPtr<CFBooleanRef>> ignoreLegibilityWeight;

    std::optional<RetainPtr<CFNumberRef>> baselineAdjust;
    std::optional<RetainPtr<CFNumberRef>> fallbackOption;
    std::optional<RetainPtr<CFNumberRef>> fixedAdvance;
    std::optional<RetainPtr<CFNumberRef>> orientation;
    std::optional<RetainPtr<CFNumberRef>> palette;
    std::optional<RetainPtr<CFNumberRef>> size;
    std::optional<RetainPtr<CFNumberRef>> sizeCategory;
    std::optional<RetainPtr<CFNumberRef>> track;
    std::optional<RetainPtr<CFNumberRef>> unscaledTracking;

    std::optional<Vector<std::pair<RetainPtr<CFNumberRef>, RetainPtr<CGColorRef>>>> paletteColors;
    std::optional<Vector<std::pair<RetainPtr<CFNumberRef>, RetainPtr<CFNumberRef>>>> variations;

    std::optional<WebCore::FontPlatformOpticalSize> opticalSize;
    std::optional<WebCore::FontPlatformSerializedTraits> traits;

    std::optional<RetainPtr<CFArrayRef>> featureSettings;

#if HAVE(ADDITIONAL_FONT_PLATFORM_SERIALIZED_ATTRIBUTES)
    std::optional<RetainPtr<CFNumberRef>> additionalNumber;
#endif
};

[CustomHeader] struct WebCore::FontPlatformSerializedCreationData {
    Vector<uint8_t> fontFaceData;
    std::optional<WebCore::FontPlatformSerializedAttributes> attributes;
    String itemInCollection;
};

[CustomHeader] struct WebCore::FontPlatformSerializedData {
    CTFontDescriptorOptions options;
    RetainPtr<CFStringRef> referenceURL;
    RetainPtr<CFStringRef> postScriptName;
    std::optional<WebCore::FontPlatformSerializedAttributes> attributes;
};
#endif // USE(CORE_TEXT)

[RefCounted] class WebCore::Font {
    WebCore::FontInternalAttributes attributes();
    WebCore::FontPlatformData platformData();
}

[Nested] enum class WebCore::FontAttributes::SubscriptOrSuperscript : uint8_t {
    None,
    Subscript,
    Superscript
};

[Nested] enum class WebCore::FontAttributes::HorizontalAlignment : uint8_t {
    Left,
    Center,
    Right,
    Justify,
    Natural
};

[CustomHeader, Nested] struct WebCore::Style::ListStyleType::NoneData {
};

[CustomHeader, Nested] struct WebCore::Style::ListStyleType::StringData {
    AtomString identifier;
};

[CustomHeader, Nested] struct WebCore::Style::ListStyleType::CounterStyleData {
    AtomString identifier;
};

header: <WebCore/StyleListStyleType.h>
[CustomHeader, Nested] struct WebCore::Style::ListStyleType {
    Variant<WebCore::Style::ListStyleType::NoneData, WebCore::Style::ListStyleType::StringData, WebCore::Style::ListStyleType::CounterStyleData> ipcData()
};

header: <WebCore/FontAttributes.h>
[CustomHeader] struct WebCore::TextList {
    WebCore::Style::ListStyleType styleType;
    int startingItemNumber
    bool ordered
};

struct WebCore::FontShadow {
    WebCore::Color color;
    WebCore::FloatSize offset;
    double blurRadius;
};

[CustomHeader] struct WebCore::FontAttributes {
    RefPtr<WebCore::Font> font
    WebCore::Color backgroundColor
    WebCore::Color foregroundColor
    WebCore::FontShadow fontShadow
    WebCore::FontAttributes::SubscriptOrSuperscript subscriptOrSuperscript
    WebCore::FontAttributes::HorizontalAlignment horizontalAlignment
    Vector<WebCore::TextList> textLists
    bool hasUnderline
    bool hasStrikeThrough
    bool hasMultipleFonts
};

header: <WebCore/FontAttributeChanges.h>
enum class WebCore::VerticalAlignChange : uint8_t {
    Superscript,
    Baseline,
    Subscript
};

header: <WebCore/FontAttributeChanges.h>
[CustomHeader] class WebCore::FontChanges {
    String m_fontName;
    String m_fontFamily;
    std::optional<double> m_fontSize;
    [Validator='!*m_fontSize || !*m_fontSizeDelta'] std::optional<double> m_fontSizeDelta;
    std::optional<bool> m_bold;
    std::optional<bool> m_italic;
};

class WebCore::FontAttributeChanges {
    std::optional<WebCore::VerticalAlignChange> m_verticalAlign;
    std::optional<WebCore::Color> m_backgroundColor;
    std::optional<WebCore::Color> m_foregroundColor;
    std::optional<WebCore::FontShadow> m_shadow;
    std::optional<bool> m_strikeThrough;
    std::optional<bool> m_underline;
    WebCore::FontChanges m_fontChanges;
};
